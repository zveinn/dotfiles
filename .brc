#!/bin/bash

export PATH=$PATH:/usr/local/go/bin:~/code/bin
export GOPATH=~/code
bind '"\C-r":reverse-search-history'

function parse_git_branch() {
  git_branch=$(git branch 2> /dev/null --show-current)
  if [ $? -eq 0 ]; then
    echo "$git_branch"
  else
    echo ""
  fi
}

function get_command_number() {
	command_num=$(history | tail -n 1 | awk '{print $1}')
  echo $((command_num + 1))
}

export PS1='\n \033[0m$(whoami) \033[35m${PWD} \033[36m$(parse_git_branch)\033[0m\n  '

shopt -s expand_aliases
alias s="history | grep $1"
alias r="source ~/.bashrc"
alias c="clear"
alias e="exit"
alias ..="cd .."
alias ...="cd ..;cd .."
alias ....="cd ..;cd ..;cd .."
alias .....="cd ..;cd ..;cd ..;cd .."
alias ......="cd ..;cd ..;cd ..;cd ..;cd .."
alias ls="ls -laF --color=auto"
alias lsh="ls -lahF --color=auto"
alias ns="netstat -tulpn"

alias ipt="iptables $1"

setup-iptables(){
 iptables -F
 iptables -X
 iptables -t nat -F
 iptables -t mangle -F

 iptables -P INPUT DROP
 iptables -P FORWARD DROP
 iptables -P OUTPUT ACCEPT

 iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
 iptables -A INPUT --src 127.0.0.1 --dst 127.0.0.1 -j ACCEPT
 iptables-save >> /etc/iptables/iptables.rules 
}

sync-fork(){
	cd ~/code/$1
	git pull
	git push fork
	cd ~/code/$1-fork
	git pull
}

setup-repos(){
 cd ~/code
 git clone git@github.com:minio/mc mc
 git clone git@github.com:minio/madmin-go madmin-go
 git clone git@github.com:minio/minio minio
 git clone git@github.com:miniohq/eos eos
 git clone git@github.com:miniohq/ec ec

 git clone git@github.com:zveinn/mc mc-fork
 git clone git@github.com:zveinn/madmin-go madmin-go-fork
 git clone git@github.com:zveinn/minio minio-fork
 git clone git@github.com:zveinn/eos eos-fork
 git clone git@github.com:zveinn/ec ec-fork

 cd ~/code/ec
 git remote add fork git@github.com:zveinn/ec
 cd ~/code/mc
 git remote add fork git@github.com:zveinn/mc
 cd ~/code/madmin-go
 git remote add fork git@github.com:zveinn/madmin-go
 cd ~/code/minio
 git remote add fork git@github.com:zveinn/minio
 cd ~/code/eos
 git remote add fork git@github.com:zveinn/eos

}

setup-code(){
	mkdir -p ~/code
	wget https://go.dev/dl/go1.24.1.linux-amd64.tar.gz
	rm -rf /usr/local/go && tar -C /usr/local -xzf go1.24.1.linux-amd64.tar.gz
	go install github.com/nametake/golangci-lint-langserver@latest
	go install golang.org/x/tools/gopls@latest

	apt install nodejs npm -y
	npm install -g typescript-language-server typescript
}

setup-system(){
 apt install git htop wget curl xclip neovim -y

 cp ./iptables-restore.service /etc/systemd/system/iptables-restore.service
 systemctl enable iptables-restore.service
 systemctl start iptables-restore.service

 cp ./sysctl.conf /etc/sysctl.conf
 sysctl -p
}


alias tn="tmux new -s $1"
alias tr="tmux source ~/.tmux.conf"
alias td="tmux detach"
alias ta="tmux attach -d -t $1"
alias tl="tmux ls"
alias tnw="tmux new-window;tmux rename-window $1"
alias ts="tmux switch -t $1"
alias tsc="tmux switch -t config"
alias tst="tmux switch -t tunnels"
alias tsm="tmux switch -t monorepo"
alias tse="tmux switch -t eos"
alias tsd="tmux switch -t dplz"
alias tsb="tmux switch -t bluam"
alias tsmc="tmux switch -t mc"
alias tmoveleft="tmux swap-window -t 0"


alias v="nvim"
alias vv="nvim ."
alias vc="v ~/.config/nvim"
alias vm="v ~/code/monorepo"
alias vtunnels="v ~/code/tunnels"

alias cdc="cd ~/.config/nvim"
alias cdm="cd ~/code/monorepo"
alias cdt="cd ~/code/tunnels"
alias cdssh="cd ~/.ssh"
alias cdgo="cd ~/code/"

alias gaa="git add --all"
alias gca="git commit -am $1"
alias gpush="git push"
alias gpull="git push"
alias gs="git status"
alias gl="git log"
alias gc='gClone'
gClone() {
  git clone git@github.com:$1
}
alias gb="gBranch"
gBranch(){
	git branch $1
	git checkout $1
}
# alias grs="gh repo sync $1 -b master"
alias grs="syncRepo"
syncRepo() {
	gh repo sync "$1" -b "master"
	echo "do not forget to git pull"
}


alias l="lazygit"

alias d='docker'
alias ds='docker start'
alias dst='docker stop'
alias dr='docker run'
alias drm='docker remove'
alias dps='docker ps --all'
alias dpsa='docker ps --all'
alias di='docker images'
alias drmi='docker rmi'
alias dl='docker logs'

dex(){
	docker exec -ti "$1" bash
}

# alias k="kubectl"
# alias kg="kubectl get"
# alias ks="kubectl get pod,svc -n kube-system"
# ka(){
# 	echo "KIND NETWORK"
# 	docker network inspect -f '{{.IPAM.Config}}' kind
# 	echo "NODES"
# 	echo "=============================================================="
# 	echo ""
# 	kubectl get nodes
# 	echo "=============================================================="
# 	echo ""
# 	echo "PODS/SERVICES >>> NAMESPACE: kube-system"
# 	echo "=============================================================="
# 	kubectl get pod,svc -n kube-system
# 	echo "=============================================================="
# 	echo ""
# 	echo "PODS/SERVICES >>> NAMESPACE: default"
# 	echo "=============================================================="
# 	kubectl get pod,svc -n default
# 	echo "=============================================================="
# 	echo ""
# 	echo "PODS/SERVICES >>> NAMESPACE: minio-operator"
# 	echo "=============================================================="
# 	kubectl get pod,svc -n minio-operator
# 	echo "=============================================================="
# }
#

